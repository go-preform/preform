package preformBuilder

import (
	"fmt"
	preformShare "github.com/go-preform/preform/share"
	"github.com/iancoleman/strcase"
	"os"
	"strings"
)

func PrepareSchema(modelPkgName, path, defaultDbOrSchema, schemaCodeName string, factories []preformShare.IFactoryBuilder) {

	_ = os.Mkdir(path, 0755)

	for _, v := range factories {
		v.(iFactoryBuilder).preGenerateCode(schemaCodeName)
	}

}

func BuildSchema(modelPkgName, path, defaultDbOrSchema, schemaCodeName string, factories []preformShare.IFactoryBuilder, enums map[string][]string, customTypes map[string]*preformShare.CustomType) {

	var (
		schemaFields   []string
		schemaFieldArr []string
		schemaSetup    []string
	)

	for _, v := range factories {
		name, schemaField, factoryName, defCode, modelCode, importPaths, inheritors := v.(iFactoryBuilder).generateCode(schemaCodeName)
		schemaFields = append(schemaFields, fmt.Sprintf(`%s *%s`, schemaField, factoryName))
		schemaFieldArr = append(schemaFieldArr, fmt.Sprintf(`s.%s`, schemaField))
		if strings.Contains(name, "_") {
			schemaSetup = append(schemaSetup, fmt.Sprintf(`s.%s = %sInit()`, schemaField, strcase.ToLowerCamel(schemaCodeName)+"_"+strcase.ToLowerCamel(schemaField)))
		} else {
			schemaSetup = append(schemaSetup, fmt.Sprintf(`s.%s = %sInit()`, schemaField, strcase.ToLowerCamel(schemaField)))
		}
		for _, inheritor := range inheritors {
			schemaFields = append(schemaFields, fmt.Sprintf(`%s *%s`, strcase.ToCamel(inheritor), factoryName))
			schemaFieldArr = append(schemaFieldArr, fmt.Sprintf(`s.%s`, strcase.ToCamel(inheritor)))
		}
		importPaths = append([]string{fmt.Sprintf(`"%s"`, pkgPath)}, importPaths...)
		err := os.WriteFile(path+"/"+name+".go", []byte(fmt.Sprintf(`package %s

import (
	%s
)

%s

%s
`, modelPkgName, strings.Join(importPaths, "\n\t"), defCode, modelCode)), 0777)
		if err != nil {
			fmt.Println(err)
		}
	}

	err := os.WriteFile(path+"/Schema_"+strcase.ToLowerCamel(schemaCodeName)+".go", []byte(fmt.Sprintf(
		`package %s
// Code generated by preform. DO NOT EDIT.
import (
	"database/sql"
	"github.com/go-preform/preform"
	"github.com/go-preform/preform/share"
)

type %sSchema struct {
	%s.Schema[*%sSchema, %sSchema]
	%s
}

func (s *%sSchema) Factories() []%s.IFactory {
	return []%s.IFactory{%s} 
}

func (s *%sSchema) Clone(name string, db...*sql.DB) %s.ISchema {
	ss := s.clone(name, db...)
	ss.PrepareFactories([]preform.ISchema{})
	ss.Inherit(s)
	return ss
}

func (s *%sSchema) clone(name string, db...*sql.DB) %s.ISchema {
	db = append(db, s.Db().DB.DB)
	var queryRunners []preformShare.QueryRunner
	if s.Db().QueryRunner.BaseRunner() != s.Db().DB {
		queryRunners = append(queryRunners, s.Db().QueryRunner)
	}
	if name == "" {
		name = s.Name()
	}
	ss := init%s(db[0], name, queryRunners...)
	return ss
}

var (
	%s *%sSchema
)

func init%s(conn *sql.DB, name string, queryRunnerForTest ... preformShare.QueryRunner) %s.ISchema {
	s := &%sSchema{}
	if %s == nil {
		%s = s
	}
	%s
	if name == "" {
		name = "%s"
	}
	s.Init(name, s, conn, queryRunnerForTest...)
	return s
}

`,
		modelPkgName,
		schemaCodeName,
		pkgName,
		schemaCodeName,
		schemaCodeName,
		strings.Join(schemaFields, "\n\t"),
		schemaCodeName,
		pkgName,
		pkgName,
		strings.Join(schemaFieldArr, ", "),
		schemaCodeName,
		pkgName,
		schemaCodeName,
		pkgName,
		strcase.ToCamel(schemaCodeName),
		schemaCodeName,
		schemaCodeName,
		strcase.ToCamel(schemaCodeName),
		pkgName,
		schemaCodeName,
		schemaCodeName,
		schemaCodeName,
		strings.Join(schemaSetup, "\n\t"),
		defaultDbOrSchema,
	)), 0777)
	if err != nil {
		fmt.Println(err)
	}
}
