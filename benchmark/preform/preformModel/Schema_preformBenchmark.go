package preformModel
// Code generated by preform. DO NOT EDIT.
import (
	"database/sql"
	"github.com/go-preform/preform"
	"github.com/go-preform/preform/share"
)

type PreformBenchmarkSchema struct {
	preform.Schema[*PreformBenchmarkSchema, PreformBenchmarkSchema]
	TestA *FactoryTestA
	TestB *FactoryTestB
	TestC *FactoryTestC
}

func (s *PreformBenchmarkSchema) Factories() []preform.IFactory {
	return []preform.IFactory{s.TestA, s.TestB, s.TestC} 
}

func (s *PreformBenchmarkSchema) Clone(name string, db...*sql.DB) preform.ISchema {
	ss := s.clone(name, db...)
	ss.PrepareFactories([]preform.ISchema{})
	ss.Inherit(s)
	return ss
}

func (s *PreformBenchmarkSchema) clone(name string, db...*sql.DB) preform.ISchema {
	db = append(db, s.Db().DB.DB)
	var queryRunners []preformShare.QueryRunner
	if s.Db().QueryRunner.BaseRunner() != s.Db().DB {
		queryRunners = append(queryRunners, s.Db().QueryRunner)
	}
	if name == "" {
		name = s.Name()
	}
	ss := initPreformBenchmark(db[0], name, queryRunners...)
	return ss
}

var (
	PreformBenchmark *PreformBenchmarkSchema
)

func initPreformBenchmark(conn *sql.DB, name string, queryRunnerForTest ... preformShare.QueryRunner) preform.ISchema {
	s := &PreformBenchmarkSchema{}
	if PreformBenchmark == nil {
		PreformBenchmark = s
	}
	s.TestA = testAInit()
	s.TestB = testBInit()
	s.TestC = testCInit()
	if name == "" {
		name = "preform_benchmark"
	}
	s.Init(name, s, conn, queryRunnerForTest...)
	return s
}

