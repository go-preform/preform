// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-preform/preform/benchmark/ent/predicate"
	"github.com/go-preform/preform/benchmark/ent/testb"
)

// TestBDelete is the builder for deleting a TestB entity.
type TestBDelete struct {
	config
	hooks    []Hook
	mutation *TestBMutation
}

// Where appends a list predicates to the TestBDelete builder.
func (tb *TestBDelete) Where(ps ...predicate.TestB) *TestBDelete {
	tb.mutation.Where(ps...)
	return tb
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tb *TestBDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tb.sqlExec, tb.mutation, tb.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tb *TestBDelete) ExecX(ctx context.Context) int {
	n, err := tb.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tb *TestBDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(testb.Table, sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt))
	if ps := tb.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tb.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tb.mutation.done = true
	return affected, err
}

// TestBDeleteOne is the builder for deleting a single TestB entity.
type TestBDeleteOne struct {
	tb *TestBDelete
}

// Where appends a list predicates to the TestBDelete builder.
func (tbo *TestBDeleteOne) Where(ps ...predicate.TestB) *TestBDeleteOne {
	tbo.tb.mutation.Where(ps...)
	return tbo
}

// Exec executes the deletion query.
func (tbo *TestBDeleteOne) Exec(ctx context.Context) error {
	n, err := tbo.tb.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{testb.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tbo *TestBDeleteOne) ExecX(ctx context.Context) {
	if err := tbo.Exec(ctx); err != nil {
		panic(err)
	}
}
