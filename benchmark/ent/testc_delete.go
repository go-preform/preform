// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-preform/preform/benchmark/ent/predicate"
	"github.com/go-preform/preform/benchmark/ent/testc"
)

// TestCDelete is the builder for deleting a TestC entity.
type TestCDelete struct {
	config
	hooks    []Hook
	mutation *TestCMutation
}

// Where appends a list predicates to the TestCDelete builder.
func (tc *TestCDelete) Where(ps ...predicate.TestC) *TestCDelete {
	tc.mutation.Where(ps...)
	return tc
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tc *TestCDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tc.sqlExec, tc.mutation, tc.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TestCDelete) ExecX(ctx context.Context) int {
	n, err := tc.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tc *TestCDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(testc.Table, sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt))
	if ps := tc.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tc.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tc.mutation.done = true
	return affected, err
}

// TestCDeleteOne is the builder for deleting a single TestC entity.
type TestCDeleteOne struct {
	tc *TestCDelete
}

// Where appends a list predicates to the TestCDelete builder.
func (tco *TestCDeleteOne) Where(ps ...predicate.TestC) *TestCDeleteOne {
	tco.tc.mutation.Where(ps...)
	return tco
}

// Exec executes the deletion query.
func (tco *TestCDeleteOne) Exec(ctx context.Context) error {
	n, err := tco.tc.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{testc.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tco *TestCDeleteOne) ExecX(ctx context.Context) {
	if err := tco.Exec(ctx); err != nil {
		panic(err)
	}
}
