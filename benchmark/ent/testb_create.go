// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-preform/preform/benchmark/ent/testa"
	"github.com/go-preform/preform/benchmark/ent/testb"
	"github.com/go-preform/preform/benchmark/ent/testc"
)

// TestBCreate is the builder for creating a TestB entity.
type TestBCreate struct {
	config
	mutation *TestBMutation
	hooks    []Hook
}

// SetAID sets the "a_id" field.
func (tb *TestBCreate) SetAID(i int) *TestBCreate {
	tb.mutation.SetAID(i)
	return tb
}

// SetNillableAID sets the "a_id" field if the given value is not nil.
func (tb *TestBCreate) SetNillableAID(i *int) *TestBCreate {
	if i != nil {
		tb.SetAID(*i)
	}
	return tb
}

// SetName sets the "name" field.
func (tb *TestBCreate) SetName(s string) *TestBCreate {
	tb.mutation.SetName(s)
	return tb
}

// SetInt4 sets the "int4" field.
func (tb *TestBCreate) SetInt4(i int32) *TestBCreate {
	tb.mutation.SetInt4(i)
	return tb
}

// SetInt8 sets the "int8" field.
func (tb *TestBCreate) SetInt8(i int) *TestBCreate {
	tb.mutation.SetInt8(i)
	return tb
}

// SetFloat4 sets the "float4" field.
func (tb *TestBCreate) SetFloat4(f float32) *TestBCreate {
	tb.mutation.SetFloat4(f)
	return tb
}

// SetFloat8 sets the "float8" field.
func (tb *TestBCreate) SetFloat8(f float64) *TestBCreate {
	tb.mutation.SetFloat8(f)
	return tb
}

// SetBool sets the "bool" field.
func (tb *TestBCreate) SetBool(b bool) *TestBCreate {
	tb.mutation.SetBool(b)
	return tb
}

// SetText sets the "text" field.
func (tb *TestBCreate) SetText(s string) *TestBCreate {
	tb.mutation.SetText(s)
	return tb
}

// SetTime sets the "time" field.
func (tb *TestBCreate) SetTime(t time.Time) *TestBCreate {
	tb.mutation.SetTime(t)
	return tb
}

// SetID sets the "id" field.
func (tb *TestBCreate) SetID(i int) *TestBCreate {
	tb.mutation.SetID(i)
	return tb
}

// SetTestAID sets the "test_a" edge to the TestA entity by ID.
func (tb *TestBCreate) SetTestAID(id int) *TestBCreate {
	tb.mutation.SetTestAID(id)
	return tb
}

// SetNillableTestAID sets the "test_a" edge to the TestA entity by ID if the given value is not nil.
func (tb *TestBCreate) SetNillableTestAID(id *int) *TestBCreate {
	if id != nil {
		tb = tb.SetTestAID(*id)
	}
	return tb
}

// SetTestA sets the "test_a" edge to the TestA entity.
func (tb *TestBCreate) SetTestA(t *TestA) *TestBCreate {
	return tb.SetTestAID(t.ID)
}

// AddTestCIDs adds the "test_cs" edge to the TestC entity by IDs.
func (tb *TestBCreate) AddTestCIDs(ids ...int) *TestBCreate {
	tb.mutation.AddTestCIDs(ids...)
	return tb
}

// AddTestCs adds the "test_cs" edges to the TestC entity.
func (tb *TestBCreate) AddTestCs(t ...*TestC) *TestBCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tb.AddTestCIDs(ids...)
}

// Mutation returns the TestBMutation object of the builder.
func (tb *TestBCreate) Mutation() *TestBMutation {
	return tb.mutation
}

// Save creates the TestB in the database.
func (tb *TestBCreate) Save(ctx context.Context) (*TestB, error) {
	return withHooks(ctx, tb.sqlSave, tb.mutation, tb.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tb *TestBCreate) SaveX(ctx context.Context) *TestB {
	v, err := tb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tb *TestBCreate) Exec(ctx context.Context) error {
	_, err := tb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tb *TestBCreate) ExecX(ctx context.Context) {
	if err := tb.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tb *TestBCreate) check() error {
	if _, ok := tb.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TestB.name"`)}
	}
	if _, ok := tb.mutation.Int4(); !ok {
		return &ValidationError{Name: "int4", err: errors.New(`ent: missing required field "TestB.int4"`)}
	}
	if _, ok := tb.mutation.Int8(); !ok {
		return &ValidationError{Name: "int8", err: errors.New(`ent: missing required field "TestB.int8"`)}
	}
	if _, ok := tb.mutation.Float4(); !ok {
		return &ValidationError{Name: "float4", err: errors.New(`ent: missing required field "TestB.float4"`)}
	}
	if _, ok := tb.mutation.Float8(); !ok {
		return &ValidationError{Name: "float8", err: errors.New(`ent: missing required field "TestB.float8"`)}
	}
	if _, ok := tb.mutation.Bool(); !ok {
		return &ValidationError{Name: "bool", err: errors.New(`ent: missing required field "TestB.bool"`)}
	}
	if _, ok := tb.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "TestB.text"`)}
	}
	if _, ok := tb.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "TestB.time"`)}
	}
	return nil
}

func (tb *TestBCreate) sqlSave(ctx context.Context) (*TestB, error) {
	if err := tb.check(); err != nil {
		return nil, err
	}
	_node, _spec := tb.createSpec()
	if err := sqlgraph.CreateNode(ctx, tb.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tb.mutation.id = &_node.ID
	tb.mutation.done = true
	return _node, nil
}

func (tb *TestBCreate) createSpec() (*TestB, *sqlgraph.CreateSpec) {
	var (
		_node = &TestB{config: tb.config}
		_spec = sqlgraph.NewCreateSpec(testb.Table, sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt))
	)
	if id, ok := tb.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tb.mutation.Name(); ok {
		_spec.SetField(testb.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tb.mutation.Int4(); ok {
		_spec.SetField(testb.FieldInt4, field.TypeInt32, value)
		_node.Int4 = value
	}
	if value, ok := tb.mutation.Int8(); ok {
		_spec.SetField(testb.FieldInt8, field.TypeInt, value)
		_node.Int8 = value
	}
	if value, ok := tb.mutation.Float4(); ok {
		_spec.SetField(testb.FieldFloat4, field.TypeFloat32, value)
		_node.Float4 = value
	}
	if value, ok := tb.mutation.Float8(); ok {
		_spec.SetField(testb.FieldFloat8, field.TypeFloat64, value)
		_node.Float8 = value
	}
	if value, ok := tb.mutation.Bool(); ok {
		_spec.SetField(testb.FieldBool, field.TypeBool, value)
		_node.Bool = value
	}
	if value, ok := tb.mutation.Text(); ok {
		_spec.SetField(testb.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := tb.mutation.Time(); ok {
		_spec.SetField(testb.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if nodes := tb.mutation.TestAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testb.TestATable,
			Columns: []string{testb.TestAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testa.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tb.mutation.TestCsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testb.TestCsTable,
			Columns: []string{testb.TestCsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestBCreateBulk is the builder for creating many TestB entities in bulk.
type TestBCreateBulk struct {
	config
	err      error
	builders []*TestBCreate
}

// Save creates the TestB entities in the database.
func (tbb *TestBCreateBulk) Save(ctx context.Context) ([]*TestB, error) {
	if tbb.err != nil {
		return nil, tbb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tbb.builders))
	nodes := make([]*TestB, len(tbb.builders))
	mutators := make([]Mutator, len(tbb.builders))
	for i := range tbb.builders {
		func(i int, root context.Context) {
			builder := tbb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestBMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tbb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tbb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tbb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tbb *TestBCreateBulk) SaveX(ctx context.Context) []*TestB {
	v, err := tbb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tbb *TestBCreateBulk) Exec(ctx context.Context) error {
	_, err := tbb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbb *TestBCreateBulk) ExecX(ctx context.Context) {
	if err := tbb.Exec(ctx); err != nil {
		panic(err)
	}
}
