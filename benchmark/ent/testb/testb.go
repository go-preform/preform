// Code generated by ent, DO NOT EDIT.

package testb

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the testb type in the database.
	Label = "testb"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAID holds the string denoting the a_id field in the database.
	FieldAID = "a_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldInt4 holds the string denoting the int4 field in the database.
	FieldInt4 = "int4"
	// FieldInt8 holds the string denoting the int8 field in the database.
	FieldInt8 = "int8"
	// FieldFloat4 holds the string denoting the float4 field in the database.
	FieldFloat4 = "float4"
	// FieldFloat8 holds the string denoting the float8 field in the database.
	FieldFloat8 = "float8"
	// FieldBool holds the string denoting the bool field in the database.
	FieldBool = "bool"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeTestA holds the string denoting the test_a edge name in mutations.
	EdgeTestA = "test_a"
	// EdgeTestCs holds the string denoting the test_cs edge name in mutations.
	EdgeTestCs = "test_cs"
	// Table holds the table name of the testb in the database.
	Table = "test_b"
	// TestATable is the table that holds the test_a relation/edge.
	TestATable = "test_b"
	// TestAInverseTable is the table name for the TestA entity.
	// It exists in this package in order to avoid circular dependency with the "testa" package.
	TestAInverseTable = "test_a"
	// TestAColumn is the table column denoting the test_a relation/edge.
	TestAColumn = "a_id"
	// TestCsTable is the table that holds the test_cs relation/edge.
	TestCsTable = "test_c"
	// TestCsInverseTable is the table name for the TestC entity.
	// It exists in this package in order to avoid circular dependency with the "testc" package.
	TestCsInverseTable = "test_c"
	// TestCsColumn is the table column denoting the test_cs relation/edge.
	TestCsColumn = "b_id"
)

// Columns holds all SQL columns for testb fields.
var Columns = []string{
	FieldID,
	FieldAID,
	FieldName,
	FieldInt4,
	FieldInt8,
	FieldFloat4,
	FieldFloat8,
	FieldBool,
	FieldText,
	FieldTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TestB queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAID orders the results by the a_id field.
func ByAID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByInt4 orders the results by the int4 field.
func ByInt4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInt4, opts...).ToFunc()
}

// ByInt8 orders the results by the int8 field.
func ByInt8(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInt8, opts...).ToFunc()
}

// ByFloat4 orders the results by the float4 field.
func ByFloat4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloat4, opts...).ToFunc()
}

// ByFloat8 orders the results by the float8 field.
func ByFloat8(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloat8, opts...).ToFunc()
}

// ByBool orders the results by the bool field.
func ByBool(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBool, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByTestAField orders the results by test_a field.
func ByTestAField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestAStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestCsCount orders the results by test_cs count.
func ByTestCsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestCsStep(), opts...)
	}
}

// ByTestCs orders the results by test_cs terms.
func ByTestCs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestCsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTestAStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestAInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TestATable, TestAColumn),
	)
}
func newTestCsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestCsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestCsTable, TestCsColumn),
	)
}
