// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-preform/preform/benchmark/ent/predicate"
	"github.com/go-preform/preform/benchmark/ent/testa"
	"github.com/go-preform/preform/benchmark/ent/testb"
)

// TestAUpdate is the builder for updating TestA entities.
type TestAUpdate struct {
	config
	hooks    []Hook
	mutation *TestAMutation
}

// Where appends a list predicates to the TestAUpdate builder.
func (ta *TestAUpdate) Where(ps ...predicate.TestA) *TestAUpdate {
	ta.mutation.Where(ps...)
	return ta
}

// SetName sets the "name" field.
func (ta *TestAUpdate) SetName(s string) *TestAUpdate {
	ta.mutation.SetName(s)
	return ta
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableName(s *string) *TestAUpdate {
	if s != nil {
		ta.SetName(*s)
	}
	return ta
}

// SetInt4 sets the "int4" field.
func (ta *TestAUpdate) SetInt4(i int32) *TestAUpdate {
	ta.mutation.ResetInt4()
	ta.mutation.SetInt4(i)
	return ta
}

// SetNillableInt4 sets the "int4" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableInt4(i *int32) *TestAUpdate {
	if i != nil {
		ta.SetInt4(*i)
	}
	return ta
}

// AddInt4 adds i to the "int4" field.
func (ta *TestAUpdate) AddInt4(i int32) *TestAUpdate {
	ta.mutation.AddInt4(i)
	return ta
}

// SetInt8 sets the "int8" field.
func (ta *TestAUpdate) SetInt8(i int) *TestAUpdate {
	ta.mutation.ResetInt8()
	ta.mutation.SetInt8(i)
	return ta
}

// SetNillableInt8 sets the "int8" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableInt8(i *int) *TestAUpdate {
	if i != nil {
		ta.SetInt8(*i)
	}
	return ta
}

// AddInt8 adds i to the "int8" field.
func (ta *TestAUpdate) AddInt8(i int) *TestAUpdate {
	ta.mutation.AddInt8(i)
	return ta
}

// SetFloat4 sets the "float4" field.
func (ta *TestAUpdate) SetFloat4(f float32) *TestAUpdate {
	ta.mutation.ResetFloat4()
	ta.mutation.SetFloat4(f)
	return ta
}

// SetNillableFloat4 sets the "float4" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableFloat4(f *float32) *TestAUpdate {
	if f != nil {
		ta.SetFloat4(*f)
	}
	return ta
}

// AddFloat4 adds f to the "float4" field.
func (ta *TestAUpdate) AddFloat4(f float32) *TestAUpdate {
	ta.mutation.AddFloat4(f)
	return ta
}

// SetFloat8 sets the "float8" field.
func (ta *TestAUpdate) SetFloat8(f float64) *TestAUpdate {
	ta.mutation.ResetFloat8()
	ta.mutation.SetFloat8(f)
	return ta
}

// SetNillableFloat8 sets the "float8" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableFloat8(f *float64) *TestAUpdate {
	if f != nil {
		ta.SetFloat8(*f)
	}
	return ta
}

// AddFloat8 adds f to the "float8" field.
func (ta *TestAUpdate) AddFloat8(f float64) *TestAUpdate {
	ta.mutation.AddFloat8(f)
	return ta
}

// SetBool sets the "bool" field.
func (ta *TestAUpdate) SetBool(b bool) *TestAUpdate {
	ta.mutation.SetBool(b)
	return ta
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableBool(b *bool) *TestAUpdate {
	if b != nil {
		ta.SetBool(*b)
	}
	return ta
}

// SetText sets the "text" field.
func (ta *TestAUpdate) SetText(s string) *TestAUpdate {
	ta.mutation.SetText(s)
	return ta
}

// SetNillableText sets the "text" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableText(s *string) *TestAUpdate {
	if s != nil {
		ta.SetText(*s)
	}
	return ta
}

// SetTime sets the "time" field.
func (ta *TestAUpdate) SetTime(t time.Time) *TestAUpdate {
	ta.mutation.SetTime(t)
	return ta
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ta *TestAUpdate) SetNillableTime(t *time.Time) *TestAUpdate {
	if t != nil {
		ta.SetTime(*t)
	}
	return ta
}

// AddTestBIDs adds the "test_bs" edge to the TestB entity by IDs.
func (ta *TestAUpdate) AddTestBIDs(ids ...int) *TestAUpdate {
	ta.mutation.AddTestBIDs(ids...)
	return ta
}

// AddTestBs adds the "test_bs" edges to the TestB entity.
func (ta *TestAUpdate) AddTestBs(t ...*TestB) *TestAUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ta.AddTestBIDs(ids...)
}

// Mutation returns the TestAMutation object of the builder.
func (ta *TestAUpdate) Mutation() *TestAMutation {
	return ta.mutation
}

// ClearTestBs clears all "test_bs" edges to the TestB entity.
func (ta *TestAUpdate) ClearTestBs() *TestAUpdate {
	ta.mutation.ClearTestBs()
	return ta
}

// RemoveTestBIDs removes the "test_bs" edge to TestB entities by IDs.
func (ta *TestAUpdate) RemoveTestBIDs(ids ...int) *TestAUpdate {
	ta.mutation.RemoveTestBIDs(ids...)
	return ta
}

// RemoveTestBs removes "test_bs" edges to TestB entities.
func (ta *TestAUpdate) RemoveTestBs(t ...*TestB) *TestAUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ta.RemoveTestBIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ta *TestAUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ta.sqlSave, ta.mutation, ta.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ta *TestAUpdate) SaveX(ctx context.Context) int {
	affected, err := ta.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ta *TestAUpdate) Exec(ctx context.Context) error {
	_, err := ta.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ta *TestAUpdate) ExecX(ctx context.Context) {
	if err := ta.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ta *TestAUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(testa.Table, testa.Columns, sqlgraph.NewFieldSpec(testa.FieldID, field.TypeInt))
	if ps := ta.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ta.mutation.Name(); ok {
		_spec.SetField(testa.FieldName, field.TypeString, value)
	}
	if value, ok := ta.mutation.Int4(); ok {
		_spec.SetField(testa.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := ta.mutation.AddedInt4(); ok {
		_spec.AddField(testa.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := ta.mutation.Int8(); ok {
		_spec.SetField(testa.FieldInt8, field.TypeInt, value)
	}
	if value, ok := ta.mutation.AddedInt8(); ok {
		_spec.AddField(testa.FieldInt8, field.TypeInt, value)
	}
	if value, ok := ta.mutation.Float4(); ok {
		_spec.SetField(testa.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := ta.mutation.AddedFloat4(); ok {
		_spec.AddField(testa.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := ta.mutation.Float8(); ok {
		_spec.SetField(testa.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := ta.mutation.AddedFloat8(); ok {
		_spec.AddField(testa.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := ta.mutation.Bool(); ok {
		_spec.SetField(testa.FieldBool, field.TypeBool, value)
	}
	if value, ok := ta.mutation.Text(); ok {
		_spec.SetField(testa.FieldText, field.TypeString, value)
	}
	if value, ok := ta.mutation.Time(); ok {
		_spec.SetField(testa.FieldTime, field.TypeTime, value)
	}
	if ta.mutation.TestBsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testa.TestBsTable,
			Columns: []string{testa.TestBsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ta.mutation.RemovedTestBsIDs(); len(nodes) > 0 && !ta.mutation.TestBsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testa.TestBsTable,
			Columns: []string{testa.TestBsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ta.mutation.TestBsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testa.TestBsTable,
			Columns: []string{testa.TestBsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ta.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ta.mutation.done = true
	return n, nil
}

// TestAUpdateOne is the builder for updating a single TestA entity.
type TestAUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestAMutation
}

// SetName sets the "name" field.
func (tao *TestAUpdateOne) SetName(s string) *TestAUpdateOne {
	tao.mutation.SetName(s)
	return tao
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableName(s *string) *TestAUpdateOne {
	if s != nil {
		tao.SetName(*s)
	}
	return tao
}

// SetInt4 sets the "int4" field.
func (tao *TestAUpdateOne) SetInt4(i int32) *TestAUpdateOne {
	tao.mutation.ResetInt4()
	tao.mutation.SetInt4(i)
	return tao
}

// SetNillableInt4 sets the "int4" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableInt4(i *int32) *TestAUpdateOne {
	if i != nil {
		tao.SetInt4(*i)
	}
	return tao
}

// AddInt4 adds i to the "int4" field.
func (tao *TestAUpdateOne) AddInt4(i int32) *TestAUpdateOne {
	tao.mutation.AddInt4(i)
	return tao
}

// SetInt8 sets the "int8" field.
func (tao *TestAUpdateOne) SetInt8(i int) *TestAUpdateOne {
	tao.mutation.ResetInt8()
	tao.mutation.SetInt8(i)
	return tao
}

// SetNillableInt8 sets the "int8" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableInt8(i *int) *TestAUpdateOne {
	if i != nil {
		tao.SetInt8(*i)
	}
	return tao
}

// AddInt8 adds i to the "int8" field.
func (tao *TestAUpdateOne) AddInt8(i int) *TestAUpdateOne {
	tao.mutation.AddInt8(i)
	return tao
}

// SetFloat4 sets the "float4" field.
func (tao *TestAUpdateOne) SetFloat4(f float32) *TestAUpdateOne {
	tao.mutation.ResetFloat4()
	tao.mutation.SetFloat4(f)
	return tao
}

// SetNillableFloat4 sets the "float4" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableFloat4(f *float32) *TestAUpdateOne {
	if f != nil {
		tao.SetFloat4(*f)
	}
	return tao
}

// AddFloat4 adds f to the "float4" field.
func (tao *TestAUpdateOne) AddFloat4(f float32) *TestAUpdateOne {
	tao.mutation.AddFloat4(f)
	return tao
}

// SetFloat8 sets the "float8" field.
func (tao *TestAUpdateOne) SetFloat8(f float64) *TestAUpdateOne {
	tao.mutation.ResetFloat8()
	tao.mutation.SetFloat8(f)
	return tao
}

// SetNillableFloat8 sets the "float8" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableFloat8(f *float64) *TestAUpdateOne {
	if f != nil {
		tao.SetFloat8(*f)
	}
	return tao
}

// AddFloat8 adds f to the "float8" field.
func (tao *TestAUpdateOne) AddFloat8(f float64) *TestAUpdateOne {
	tao.mutation.AddFloat8(f)
	return tao
}

// SetBool sets the "bool" field.
func (tao *TestAUpdateOne) SetBool(b bool) *TestAUpdateOne {
	tao.mutation.SetBool(b)
	return tao
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableBool(b *bool) *TestAUpdateOne {
	if b != nil {
		tao.SetBool(*b)
	}
	return tao
}

// SetText sets the "text" field.
func (tao *TestAUpdateOne) SetText(s string) *TestAUpdateOne {
	tao.mutation.SetText(s)
	return tao
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableText(s *string) *TestAUpdateOne {
	if s != nil {
		tao.SetText(*s)
	}
	return tao
}

// SetTime sets the "time" field.
func (tao *TestAUpdateOne) SetTime(t time.Time) *TestAUpdateOne {
	tao.mutation.SetTime(t)
	return tao
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tao *TestAUpdateOne) SetNillableTime(t *time.Time) *TestAUpdateOne {
	if t != nil {
		tao.SetTime(*t)
	}
	return tao
}

// AddTestBIDs adds the "test_bs" edge to the TestB entity by IDs.
func (tao *TestAUpdateOne) AddTestBIDs(ids ...int) *TestAUpdateOne {
	tao.mutation.AddTestBIDs(ids...)
	return tao
}

// AddTestBs adds the "test_bs" edges to the TestB entity.
func (tao *TestAUpdateOne) AddTestBs(t ...*TestB) *TestAUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tao.AddTestBIDs(ids...)
}

// Mutation returns the TestAMutation object of the builder.
func (tao *TestAUpdateOne) Mutation() *TestAMutation {
	return tao.mutation
}

// ClearTestBs clears all "test_bs" edges to the TestB entity.
func (tao *TestAUpdateOne) ClearTestBs() *TestAUpdateOne {
	tao.mutation.ClearTestBs()
	return tao
}

// RemoveTestBIDs removes the "test_bs" edge to TestB entities by IDs.
func (tao *TestAUpdateOne) RemoveTestBIDs(ids ...int) *TestAUpdateOne {
	tao.mutation.RemoveTestBIDs(ids...)
	return tao
}

// RemoveTestBs removes "test_bs" edges to TestB entities.
func (tao *TestAUpdateOne) RemoveTestBs(t ...*TestB) *TestAUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tao.RemoveTestBIDs(ids...)
}

// Where appends a list predicates to the TestAUpdate builder.
func (tao *TestAUpdateOne) Where(ps ...predicate.TestA) *TestAUpdateOne {
	tao.mutation.Where(ps...)
	return tao
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tao *TestAUpdateOne) Select(field string, fields ...string) *TestAUpdateOne {
	tao.fields = append([]string{field}, fields...)
	return tao
}

// Save executes the query and returns the updated TestA entity.
func (tao *TestAUpdateOne) Save(ctx context.Context) (*TestA, error) {
	return withHooks(ctx, tao.sqlSave, tao.mutation, tao.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tao *TestAUpdateOne) SaveX(ctx context.Context) *TestA {
	node, err := tao.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tao *TestAUpdateOne) Exec(ctx context.Context) error {
	_, err := tao.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tao *TestAUpdateOne) ExecX(ctx context.Context) {
	if err := tao.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tao *TestAUpdateOne) sqlSave(ctx context.Context) (_node *TestA, err error) {
	_spec := sqlgraph.NewUpdateSpec(testa.Table, testa.Columns, sqlgraph.NewFieldSpec(testa.FieldID, field.TypeInt))
	id, ok := tao.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestA.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tao.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testa.FieldID)
		for _, f := range fields {
			if !testa.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testa.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tao.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tao.mutation.Name(); ok {
		_spec.SetField(testa.FieldName, field.TypeString, value)
	}
	if value, ok := tao.mutation.Int4(); ok {
		_spec.SetField(testa.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tao.mutation.AddedInt4(); ok {
		_spec.AddField(testa.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tao.mutation.Int8(); ok {
		_spec.SetField(testa.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tao.mutation.AddedInt8(); ok {
		_spec.AddField(testa.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tao.mutation.Float4(); ok {
		_spec.SetField(testa.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tao.mutation.AddedFloat4(); ok {
		_spec.AddField(testa.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tao.mutation.Float8(); ok {
		_spec.SetField(testa.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tao.mutation.AddedFloat8(); ok {
		_spec.AddField(testa.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tao.mutation.Bool(); ok {
		_spec.SetField(testa.FieldBool, field.TypeBool, value)
	}
	if value, ok := tao.mutation.Text(); ok {
		_spec.SetField(testa.FieldText, field.TypeString, value)
	}
	if value, ok := tao.mutation.Time(); ok {
		_spec.SetField(testa.FieldTime, field.TypeTime, value)
	}
	if tao.mutation.TestBsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testa.TestBsTable,
			Columns: []string{testa.TestBsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tao.mutation.RemovedTestBsIDs(); len(nodes) > 0 && !tao.mutation.TestBsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testa.TestBsTable,
			Columns: []string{testa.TestBsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tao.mutation.TestBsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testa.TestBsTable,
			Columns: []string{testa.TestBsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestA{config: tao.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tao.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testa.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tao.mutation.done = true
	return _node, nil
}
