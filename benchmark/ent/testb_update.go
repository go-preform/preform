// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-preform/preform/benchmark/ent/predicate"
	"github.com/go-preform/preform/benchmark/ent/testa"
	"github.com/go-preform/preform/benchmark/ent/testb"
	"github.com/go-preform/preform/benchmark/ent/testc"
)

// TestBUpdate is the builder for updating TestB entities.
type TestBUpdate struct {
	config
	hooks    []Hook
	mutation *TestBMutation
}

// Where appends a list predicates to the TestBUpdate builder.
func (tb *TestBUpdate) Where(ps ...predicate.TestB) *TestBUpdate {
	tb.mutation.Where(ps...)
	return tb
}

// SetAID sets the "a_id" field.
func (tb *TestBUpdate) SetAID(i int) *TestBUpdate {
	tb.mutation.SetAID(i)
	return tb
}

// SetNillableAID sets the "a_id" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableAID(i *int) *TestBUpdate {
	if i != nil {
		tb.SetAID(*i)
	}
	return tb
}

// ClearAID clears the value of the "a_id" field.
func (tb *TestBUpdate) ClearAID() *TestBUpdate {
	tb.mutation.ClearAID()
	return tb
}

// SetName sets the "name" field.
func (tb *TestBUpdate) SetName(s string) *TestBUpdate {
	tb.mutation.SetName(s)
	return tb
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableName(s *string) *TestBUpdate {
	if s != nil {
		tb.SetName(*s)
	}
	return tb
}

// SetInt4 sets the "int4" field.
func (tb *TestBUpdate) SetInt4(i int32) *TestBUpdate {
	tb.mutation.ResetInt4()
	tb.mutation.SetInt4(i)
	return tb
}

// SetNillableInt4 sets the "int4" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableInt4(i *int32) *TestBUpdate {
	if i != nil {
		tb.SetInt4(*i)
	}
	return tb
}

// AddInt4 adds i to the "int4" field.
func (tb *TestBUpdate) AddInt4(i int32) *TestBUpdate {
	tb.mutation.AddInt4(i)
	return tb
}

// SetInt8 sets the "int8" field.
func (tb *TestBUpdate) SetInt8(i int) *TestBUpdate {
	tb.mutation.ResetInt8()
	tb.mutation.SetInt8(i)
	return tb
}

// SetNillableInt8 sets the "int8" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableInt8(i *int) *TestBUpdate {
	if i != nil {
		tb.SetInt8(*i)
	}
	return tb
}

// AddInt8 adds i to the "int8" field.
func (tb *TestBUpdate) AddInt8(i int) *TestBUpdate {
	tb.mutation.AddInt8(i)
	return tb
}

// SetFloat4 sets the "float4" field.
func (tb *TestBUpdate) SetFloat4(f float32) *TestBUpdate {
	tb.mutation.ResetFloat4()
	tb.mutation.SetFloat4(f)
	return tb
}

// SetNillableFloat4 sets the "float4" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableFloat4(f *float32) *TestBUpdate {
	if f != nil {
		tb.SetFloat4(*f)
	}
	return tb
}

// AddFloat4 adds f to the "float4" field.
func (tb *TestBUpdate) AddFloat4(f float32) *TestBUpdate {
	tb.mutation.AddFloat4(f)
	return tb
}

// SetFloat8 sets the "float8" field.
func (tb *TestBUpdate) SetFloat8(f float64) *TestBUpdate {
	tb.mutation.ResetFloat8()
	tb.mutation.SetFloat8(f)
	return tb
}

// SetNillableFloat8 sets the "float8" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableFloat8(f *float64) *TestBUpdate {
	if f != nil {
		tb.SetFloat8(*f)
	}
	return tb
}

// AddFloat8 adds f to the "float8" field.
func (tb *TestBUpdate) AddFloat8(f float64) *TestBUpdate {
	tb.mutation.AddFloat8(f)
	return tb
}

// SetBool sets the "bool" field.
func (tb *TestBUpdate) SetBool(b bool) *TestBUpdate {
	tb.mutation.SetBool(b)
	return tb
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableBool(b *bool) *TestBUpdate {
	if b != nil {
		tb.SetBool(*b)
	}
	return tb
}

// SetText sets the "text" field.
func (tb *TestBUpdate) SetText(s string) *TestBUpdate {
	tb.mutation.SetText(s)
	return tb
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableText(s *string) *TestBUpdate {
	if s != nil {
		tb.SetText(*s)
	}
	return tb
}

// SetTime sets the "time" field.
func (tb *TestBUpdate) SetTime(t time.Time) *TestBUpdate {
	tb.mutation.SetTime(t)
	return tb
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tb *TestBUpdate) SetNillableTime(t *time.Time) *TestBUpdate {
	if t != nil {
		tb.SetTime(*t)
	}
	return tb
}

// SetTestAID sets the "test_a" edge to the TestA entity by ID.
func (tb *TestBUpdate) SetTestAID(id int) *TestBUpdate {
	tb.mutation.SetTestAID(id)
	return tb
}

// SetNillableTestAID sets the "test_a" edge to the TestA entity by ID if the given value is not nil.
func (tb *TestBUpdate) SetNillableTestAID(id *int) *TestBUpdate {
	if id != nil {
		tb = tb.SetTestAID(*id)
	}
	return tb
}

// SetTestA sets the "test_a" edge to the TestA entity.
func (tb *TestBUpdate) SetTestA(t *TestA) *TestBUpdate {
	return tb.SetTestAID(t.ID)
}

// AddTestCIDs adds the "test_cs" edge to the TestC entity by IDs.
func (tb *TestBUpdate) AddTestCIDs(ids ...int) *TestBUpdate {
	tb.mutation.AddTestCIDs(ids...)
	return tb
}

// AddTestCs adds the "test_cs" edges to the TestC entity.
func (tb *TestBUpdate) AddTestCs(t ...*TestC) *TestBUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tb.AddTestCIDs(ids...)
}

// Mutation returns the TestBMutation object of the builder.
func (tb *TestBUpdate) Mutation() *TestBMutation {
	return tb.mutation
}

// ClearTestA clears the "test_a" edge to the TestA entity.
func (tb *TestBUpdate) ClearTestA() *TestBUpdate {
	tb.mutation.ClearTestA()
	return tb
}

// ClearTestCs clears all "test_cs" edges to the TestC entity.
func (tb *TestBUpdate) ClearTestCs() *TestBUpdate {
	tb.mutation.ClearTestCs()
	return tb
}

// RemoveTestCIDs removes the "test_cs" edge to TestC entities by IDs.
func (tb *TestBUpdate) RemoveTestCIDs(ids ...int) *TestBUpdate {
	tb.mutation.RemoveTestCIDs(ids...)
	return tb
}

// RemoveTestCs removes "test_cs" edges to TestC entities.
func (tb *TestBUpdate) RemoveTestCs(t ...*TestC) *TestBUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tb.RemoveTestCIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tb *TestBUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tb.sqlSave, tb.mutation, tb.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tb *TestBUpdate) SaveX(ctx context.Context) int {
	affected, err := tb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tb *TestBUpdate) Exec(ctx context.Context) error {
	_, err := tb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tb *TestBUpdate) ExecX(ctx context.Context) {
	if err := tb.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tb *TestBUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(testb.Table, testb.Columns, sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt))
	if ps := tb.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tb.mutation.Name(); ok {
		_spec.SetField(testb.FieldName, field.TypeString, value)
	}
	if value, ok := tb.mutation.Int4(); ok {
		_spec.SetField(testb.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tb.mutation.AddedInt4(); ok {
		_spec.AddField(testb.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tb.mutation.Int8(); ok {
		_spec.SetField(testb.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tb.mutation.AddedInt8(); ok {
		_spec.AddField(testb.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tb.mutation.Float4(); ok {
		_spec.SetField(testb.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tb.mutation.AddedFloat4(); ok {
		_spec.AddField(testb.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tb.mutation.Float8(); ok {
		_spec.SetField(testb.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tb.mutation.AddedFloat8(); ok {
		_spec.AddField(testb.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tb.mutation.Bool(); ok {
		_spec.SetField(testb.FieldBool, field.TypeBool, value)
	}
	if value, ok := tb.mutation.Text(); ok {
		_spec.SetField(testb.FieldText, field.TypeString, value)
	}
	if value, ok := tb.mutation.Time(); ok {
		_spec.SetField(testb.FieldTime, field.TypeTime, value)
	}
	if tb.mutation.TestACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testb.TestATable,
			Columns: []string{testb.TestAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testa.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tb.mutation.TestAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testb.TestATable,
			Columns: []string{testb.TestAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testa.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tb.mutation.TestCsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testb.TestCsTable,
			Columns: []string{testb.TestCsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tb.mutation.RemovedTestCsIDs(); len(nodes) > 0 && !tb.mutation.TestCsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testb.TestCsTable,
			Columns: []string{testb.TestCsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tb.mutation.TestCsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testb.TestCsTable,
			Columns: []string{testb.TestCsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tb.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tb.mutation.done = true
	return n, nil
}

// TestBUpdateOne is the builder for updating a single TestB entity.
type TestBUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestBMutation
}

// SetAID sets the "a_id" field.
func (tbo *TestBUpdateOne) SetAID(i int) *TestBUpdateOne {
	tbo.mutation.SetAID(i)
	return tbo
}

// SetNillableAID sets the "a_id" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableAID(i *int) *TestBUpdateOne {
	if i != nil {
		tbo.SetAID(*i)
	}
	return tbo
}

// ClearAID clears the value of the "a_id" field.
func (tbo *TestBUpdateOne) ClearAID() *TestBUpdateOne {
	tbo.mutation.ClearAID()
	return tbo
}

// SetName sets the "name" field.
func (tbo *TestBUpdateOne) SetName(s string) *TestBUpdateOne {
	tbo.mutation.SetName(s)
	return tbo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableName(s *string) *TestBUpdateOne {
	if s != nil {
		tbo.SetName(*s)
	}
	return tbo
}

// SetInt4 sets the "int4" field.
func (tbo *TestBUpdateOne) SetInt4(i int32) *TestBUpdateOne {
	tbo.mutation.ResetInt4()
	tbo.mutation.SetInt4(i)
	return tbo
}

// SetNillableInt4 sets the "int4" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableInt4(i *int32) *TestBUpdateOne {
	if i != nil {
		tbo.SetInt4(*i)
	}
	return tbo
}

// AddInt4 adds i to the "int4" field.
func (tbo *TestBUpdateOne) AddInt4(i int32) *TestBUpdateOne {
	tbo.mutation.AddInt4(i)
	return tbo
}

// SetInt8 sets the "int8" field.
func (tbo *TestBUpdateOne) SetInt8(i int) *TestBUpdateOne {
	tbo.mutation.ResetInt8()
	tbo.mutation.SetInt8(i)
	return tbo
}

// SetNillableInt8 sets the "int8" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableInt8(i *int) *TestBUpdateOne {
	if i != nil {
		tbo.SetInt8(*i)
	}
	return tbo
}

// AddInt8 adds i to the "int8" field.
func (tbo *TestBUpdateOne) AddInt8(i int) *TestBUpdateOne {
	tbo.mutation.AddInt8(i)
	return tbo
}

// SetFloat4 sets the "float4" field.
func (tbo *TestBUpdateOne) SetFloat4(f float32) *TestBUpdateOne {
	tbo.mutation.ResetFloat4()
	tbo.mutation.SetFloat4(f)
	return tbo
}

// SetNillableFloat4 sets the "float4" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableFloat4(f *float32) *TestBUpdateOne {
	if f != nil {
		tbo.SetFloat4(*f)
	}
	return tbo
}

// AddFloat4 adds f to the "float4" field.
func (tbo *TestBUpdateOne) AddFloat4(f float32) *TestBUpdateOne {
	tbo.mutation.AddFloat4(f)
	return tbo
}

// SetFloat8 sets the "float8" field.
func (tbo *TestBUpdateOne) SetFloat8(f float64) *TestBUpdateOne {
	tbo.mutation.ResetFloat8()
	tbo.mutation.SetFloat8(f)
	return tbo
}

// SetNillableFloat8 sets the "float8" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableFloat8(f *float64) *TestBUpdateOne {
	if f != nil {
		tbo.SetFloat8(*f)
	}
	return tbo
}

// AddFloat8 adds f to the "float8" field.
func (tbo *TestBUpdateOne) AddFloat8(f float64) *TestBUpdateOne {
	tbo.mutation.AddFloat8(f)
	return tbo
}

// SetBool sets the "bool" field.
func (tbo *TestBUpdateOne) SetBool(b bool) *TestBUpdateOne {
	tbo.mutation.SetBool(b)
	return tbo
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableBool(b *bool) *TestBUpdateOne {
	if b != nil {
		tbo.SetBool(*b)
	}
	return tbo
}

// SetText sets the "text" field.
func (tbo *TestBUpdateOne) SetText(s string) *TestBUpdateOne {
	tbo.mutation.SetText(s)
	return tbo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableText(s *string) *TestBUpdateOne {
	if s != nil {
		tbo.SetText(*s)
	}
	return tbo
}

// SetTime sets the "time" field.
func (tbo *TestBUpdateOne) SetTime(t time.Time) *TestBUpdateOne {
	tbo.mutation.SetTime(t)
	return tbo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableTime(t *time.Time) *TestBUpdateOne {
	if t != nil {
		tbo.SetTime(*t)
	}
	return tbo
}

// SetTestAID sets the "test_a" edge to the TestA entity by ID.
func (tbo *TestBUpdateOne) SetTestAID(id int) *TestBUpdateOne {
	tbo.mutation.SetTestAID(id)
	return tbo
}

// SetNillableTestAID sets the "test_a" edge to the TestA entity by ID if the given value is not nil.
func (tbo *TestBUpdateOne) SetNillableTestAID(id *int) *TestBUpdateOne {
	if id != nil {
		tbo = tbo.SetTestAID(*id)
	}
	return tbo
}

// SetTestA sets the "test_a" edge to the TestA entity.
func (tbo *TestBUpdateOne) SetTestA(t *TestA) *TestBUpdateOne {
	return tbo.SetTestAID(t.ID)
}

// AddTestCIDs adds the "test_cs" edge to the TestC entity by IDs.
func (tbo *TestBUpdateOne) AddTestCIDs(ids ...int) *TestBUpdateOne {
	tbo.mutation.AddTestCIDs(ids...)
	return tbo
}

// AddTestCs adds the "test_cs" edges to the TestC entity.
func (tbo *TestBUpdateOne) AddTestCs(t ...*TestC) *TestBUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tbo.AddTestCIDs(ids...)
}

// Mutation returns the TestBMutation object of the builder.
func (tbo *TestBUpdateOne) Mutation() *TestBMutation {
	return tbo.mutation
}

// ClearTestA clears the "test_a" edge to the TestA entity.
func (tbo *TestBUpdateOne) ClearTestA() *TestBUpdateOne {
	tbo.mutation.ClearTestA()
	return tbo
}

// ClearTestCs clears all "test_cs" edges to the TestC entity.
func (tbo *TestBUpdateOne) ClearTestCs() *TestBUpdateOne {
	tbo.mutation.ClearTestCs()
	return tbo
}

// RemoveTestCIDs removes the "test_cs" edge to TestC entities by IDs.
func (tbo *TestBUpdateOne) RemoveTestCIDs(ids ...int) *TestBUpdateOne {
	tbo.mutation.RemoveTestCIDs(ids...)
	return tbo
}

// RemoveTestCs removes "test_cs" edges to TestC entities.
func (tbo *TestBUpdateOne) RemoveTestCs(t ...*TestC) *TestBUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tbo.RemoveTestCIDs(ids...)
}

// Where appends a list predicates to the TestBUpdate builder.
func (tbo *TestBUpdateOne) Where(ps ...predicate.TestB) *TestBUpdateOne {
	tbo.mutation.Where(ps...)
	return tbo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tbo *TestBUpdateOne) Select(field string, fields ...string) *TestBUpdateOne {
	tbo.fields = append([]string{field}, fields...)
	return tbo
}

// Save executes the query and returns the updated TestB entity.
func (tbo *TestBUpdateOne) Save(ctx context.Context) (*TestB, error) {
	return withHooks(ctx, tbo.sqlSave, tbo.mutation, tbo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tbo *TestBUpdateOne) SaveX(ctx context.Context) *TestB {
	node, err := tbo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tbo *TestBUpdateOne) Exec(ctx context.Context) error {
	_, err := tbo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tbo *TestBUpdateOne) ExecX(ctx context.Context) {
	if err := tbo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tbo *TestBUpdateOne) sqlSave(ctx context.Context) (_node *TestB, err error) {
	_spec := sqlgraph.NewUpdateSpec(testb.Table, testb.Columns, sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt))
	id, ok := tbo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestB.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tbo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testb.FieldID)
		for _, f := range fields {
			if !testb.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testb.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tbo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tbo.mutation.Name(); ok {
		_spec.SetField(testb.FieldName, field.TypeString, value)
	}
	if value, ok := tbo.mutation.Int4(); ok {
		_spec.SetField(testb.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tbo.mutation.AddedInt4(); ok {
		_spec.AddField(testb.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tbo.mutation.Int8(); ok {
		_spec.SetField(testb.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tbo.mutation.AddedInt8(); ok {
		_spec.AddField(testb.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tbo.mutation.Float4(); ok {
		_spec.SetField(testb.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tbo.mutation.AddedFloat4(); ok {
		_spec.AddField(testb.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tbo.mutation.Float8(); ok {
		_spec.SetField(testb.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tbo.mutation.AddedFloat8(); ok {
		_spec.AddField(testb.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tbo.mutation.Bool(); ok {
		_spec.SetField(testb.FieldBool, field.TypeBool, value)
	}
	if value, ok := tbo.mutation.Text(); ok {
		_spec.SetField(testb.FieldText, field.TypeString, value)
	}
	if value, ok := tbo.mutation.Time(); ok {
		_spec.SetField(testb.FieldTime, field.TypeTime, value)
	}
	if tbo.mutation.TestACleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testb.TestATable,
			Columns: []string{testb.TestAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testa.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tbo.mutation.TestAIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testb.TestATable,
			Columns: []string{testb.TestAColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testa.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tbo.mutation.TestCsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testb.TestCsTable,
			Columns: []string{testb.TestCsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tbo.mutation.RemovedTestCsIDs(); len(nodes) > 0 && !tbo.mutation.TestCsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testb.TestCsTable,
			Columns: []string{testb.TestCsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tbo.mutation.TestCsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testb.TestCsTable,
			Columns: []string{testb.TestCsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestB{config: tbo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tbo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tbo.mutation.done = true
	return _node, nil
}
