// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-preform/preform/benchmark/ent/predicate"
	"github.com/go-preform/preform/benchmark/ent/testb"
	"github.com/go-preform/preform/benchmark/ent/testc"
)

// TestCUpdate is the builder for updating TestC entities.
type TestCUpdate struct {
	config
	hooks    []Hook
	mutation *TestCMutation
}

// Where appends a list predicates to the TestCUpdate builder.
func (tc *TestCUpdate) Where(ps ...predicate.TestC) *TestCUpdate {
	tc.mutation.Where(ps...)
	return tc
}

// SetBID sets the "b_id" field.
func (tc *TestCUpdate) SetBID(i int) *TestCUpdate {
	tc.mutation.SetBID(i)
	return tc
}

// SetNillableBID sets the "b_id" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableBID(i *int) *TestCUpdate {
	if i != nil {
		tc.SetBID(*i)
	}
	return tc
}

// ClearBID clears the value of the "b_id" field.
func (tc *TestCUpdate) ClearBID() *TestCUpdate {
	tc.mutation.ClearBID()
	return tc
}

// SetName sets the "name" field.
func (tc *TestCUpdate) SetName(s string) *TestCUpdate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableName(s *string) *TestCUpdate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetInt4 sets the "int4" field.
func (tc *TestCUpdate) SetInt4(i int32) *TestCUpdate {
	tc.mutation.ResetInt4()
	tc.mutation.SetInt4(i)
	return tc
}

// SetNillableInt4 sets the "int4" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableInt4(i *int32) *TestCUpdate {
	if i != nil {
		tc.SetInt4(*i)
	}
	return tc
}

// AddInt4 adds i to the "int4" field.
func (tc *TestCUpdate) AddInt4(i int32) *TestCUpdate {
	tc.mutation.AddInt4(i)
	return tc
}

// SetInt8 sets the "int8" field.
func (tc *TestCUpdate) SetInt8(i int) *TestCUpdate {
	tc.mutation.ResetInt8()
	tc.mutation.SetInt8(i)
	return tc
}

// SetNillableInt8 sets the "int8" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableInt8(i *int) *TestCUpdate {
	if i != nil {
		tc.SetInt8(*i)
	}
	return tc
}

// AddInt8 adds i to the "int8" field.
func (tc *TestCUpdate) AddInt8(i int) *TestCUpdate {
	tc.mutation.AddInt8(i)
	return tc
}

// SetFloat4 sets the "float4" field.
func (tc *TestCUpdate) SetFloat4(f float32) *TestCUpdate {
	tc.mutation.ResetFloat4()
	tc.mutation.SetFloat4(f)
	return tc
}

// SetNillableFloat4 sets the "float4" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableFloat4(f *float32) *TestCUpdate {
	if f != nil {
		tc.SetFloat4(*f)
	}
	return tc
}

// AddFloat4 adds f to the "float4" field.
func (tc *TestCUpdate) AddFloat4(f float32) *TestCUpdate {
	tc.mutation.AddFloat4(f)
	return tc
}

// SetFloat8 sets the "float8" field.
func (tc *TestCUpdate) SetFloat8(f float64) *TestCUpdate {
	tc.mutation.ResetFloat8()
	tc.mutation.SetFloat8(f)
	return tc
}

// SetNillableFloat8 sets the "float8" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableFloat8(f *float64) *TestCUpdate {
	if f != nil {
		tc.SetFloat8(*f)
	}
	return tc
}

// AddFloat8 adds f to the "float8" field.
func (tc *TestCUpdate) AddFloat8(f float64) *TestCUpdate {
	tc.mutation.AddFloat8(f)
	return tc
}

// SetBool sets the "bool" field.
func (tc *TestCUpdate) SetBool(b bool) *TestCUpdate {
	tc.mutation.SetBool(b)
	return tc
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableBool(b *bool) *TestCUpdate {
	if b != nil {
		tc.SetBool(*b)
	}
	return tc
}

// SetText sets the "text" field.
func (tc *TestCUpdate) SetText(s string) *TestCUpdate {
	tc.mutation.SetText(s)
	return tc
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableText(s *string) *TestCUpdate {
	if s != nil {
		tc.SetText(*s)
	}
	return tc
}

// SetTime sets the "time" field.
func (tc *TestCUpdate) SetTime(t time.Time) *TestCUpdate {
	tc.mutation.SetTime(t)
	return tc
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tc *TestCUpdate) SetNillableTime(t *time.Time) *TestCUpdate {
	if t != nil {
		tc.SetTime(*t)
	}
	return tc
}

// SetTestBID sets the "test_b" edge to the TestB entity by ID.
func (tc *TestCUpdate) SetTestBID(id int) *TestCUpdate {
	tc.mutation.SetTestBID(id)
	return tc
}

// SetNillableTestBID sets the "test_b" edge to the TestB entity by ID if the given value is not nil.
func (tc *TestCUpdate) SetNillableTestBID(id *int) *TestCUpdate {
	if id != nil {
		tc = tc.SetTestBID(*id)
	}
	return tc
}

// SetTestB sets the "test_b" edge to the TestB entity.
func (tc *TestCUpdate) SetTestB(t *TestB) *TestCUpdate {
	return tc.SetTestBID(t.ID)
}

// Mutation returns the TestCMutation object of the builder.
func (tc *TestCUpdate) Mutation() *TestCMutation {
	return tc.mutation
}

// ClearTestB clears the "test_b" edge to the TestB entity.
func (tc *TestCUpdate) ClearTestB() *TestCUpdate {
	tc.mutation.ClearTestB()
	return tc
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tc *TestCUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tc *TestCUpdate) SaveX(ctx context.Context) int {
	affected, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tc *TestCUpdate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TestCUpdate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tc *TestCUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(testc.Table, testc.Columns, sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt))
	if ps := tc.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(testc.FieldName, field.TypeString, value)
	}
	if value, ok := tc.mutation.Int4(); ok {
		_spec.SetField(testc.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tc.mutation.AddedInt4(); ok {
		_spec.AddField(testc.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tc.mutation.Int8(); ok {
		_spec.SetField(testc.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tc.mutation.AddedInt8(); ok {
		_spec.AddField(testc.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tc.mutation.Float4(); ok {
		_spec.SetField(testc.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tc.mutation.AddedFloat4(); ok {
		_spec.AddField(testc.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tc.mutation.Float8(); ok {
		_spec.SetField(testc.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tc.mutation.AddedFloat8(); ok {
		_spec.AddField(testc.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tc.mutation.Bool(); ok {
		_spec.SetField(testc.FieldBool, field.TypeBool, value)
	}
	if value, ok := tc.mutation.Text(); ok {
		_spec.SetField(testc.FieldText, field.TypeString, value)
	}
	if value, ok := tc.mutation.Time(); ok {
		_spec.SetField(testc.FieldTime, field.TypeTime, value)
	}
	if tc.mutation.TestBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testc.TestBTable,
			Columns: []string{testc.TestBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tc.mutation.TestBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testc.TestBTable,
			Columns: []string{testc.TestBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tc.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tc.mutation.done = true
	return n, nil
}

// TestCUpdateOne is the builder for updating a single TestC entity.
type TestCUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestCMutation
}

// SetBID sets the "b_id" field.
func (tco *TestCUpdateOne) SetBID(i int) *TestCUpdateOne {
	tco.mutation.SetBID(i)
	return tco
}

// SetNillableBID sets the "b_id" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableBID(i *int) *TestCUpdateOne {
	if i != nil {
		tco.SetBID(*i)
	}
	return tco
}

// ClearBID clears the value of the "b_id" field.
func (tco *TestCUpdateOne) ClearBID() *TestCUpdateOne {
	tco.mutation.ClearBID()
	return tco
}

// SetName sets the "name" field.
func (tco *TestCUpdateOne) SetName(s string) *TestCUpdateOne {
	tco.mutation.SetName(s)
	return tco
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableName(s *string) *TestCUpdateOne {
	if s != nil {
		tco.SetName(*s)
	}
	return tco
}

// SetInt4 sets the "int4" field.
func (tco *TestCUpdateOne) SetInt4(i int32) *TestCUpdateOne {
	tco.mutation.ResetInt4()
	tco.mutation.SetInt4(i)
	return tco
}

// SetNillableInt4 sets the "int4" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableInt4(i *int32) *TestCUpdateOne {
	if i != nil {
		tco.SetInt4(*i)
	}
	return tco
}

// AddInt4 adds i to the "int4" field.
func (tco *TestCUpdateOne) AddInt4(i int32) *TestCUpdateOne {
	tco.mutation.AddInt4(i)
	return tco
}

// SetInt8 sets the "int8" field.
func (tco *TestCUpdateOne) SetInt8(i int) *TestCUpdateOne {
	tco.mutation.ResetInt8()
	tco.mutation.SetInt8(i)
	return tco
}

// SetNillableInt8 sets the "int8" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableInt8(i *int) *TestCUpdateOne {
	if i != nil {
		tco.SetInt8(*i)
	}
	return tco
}

// AddInt8 adds i to the "int8" field.
func (tco *TestCUpdateOne) AddInt8(i int) *TestCUpdateOne {
	tco.mutation.AddInt8(i)
	return tco
}

// SetFloat4 sets the "float4" field.
func (tco *TestCUpdateOne) SetFloat4(f float32) *TestCUpdateOne {
	tco.mutation.ResetFloat4()
	tco.mutation.SetFloat4(f)
	return tco
}

// SetNillableFloat4 sets the "float4" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableFloat4(f *float32) *TestCUpdateOne {
	if f != nil {
		tco.SetFloat4(*f)
	}
	return tco
}

// AddFloat4 adds f to the "float4" field.
func (tco *TestCUpdateOne) AddFloat4(f float32) *TestCUpdateOne {
	tco.mutation.AddFloat4(f)
	return tco
}

// SetFloat8 sets the "float8" field.
func (tco *TestCUpdateOne) SetFloat8(f float64) *TestCUpdateOne {
	tco.mutation.ResetFloat8()
	tco.mutation.SetFloat8(f)
	return tco
}

// SetNillableFloat8 sets the "float8" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableFloat8(f *float64) *TestCUpdateOne {
	if f != nil {
		tco.SetFloat8(*f)
	}
	return tco
}

// AddFloat8 adds f to the "float8" field.
func (tco *TestCUpdateOne) AddFloat8(f float64) *TestCUpdateOne {
	tco.mutation.AddFloat8(f)
	return tco
}

// SetBool sets the "bool" field.
func (tco *TestCUpdateOne) SetBool(b bool) *TestCUpdateOne {
	tco.mutation.SetBool(b)
	return tco
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableBool(b *bool) *TestCUpdateOne {
	if b != nil {
		tco.SetBool(*b)
	}
	return tco
}

// SetText sets the "text" field.
func (tco *TestCUpdateOne) SetText(s string) *TestCUpdateOne {
	tco.mutation.SetText(s)
	return tco
}

// SetNillableText sets the "text" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableText(s *string) *TestCUpdateOne {
	if s != nil {
		tco.SetText(*s)
	}
	return tco
}

// SetTime sets the "time" field.
func (tco *TestCUpdateOne) SetTime(t time.Time) *TestCUpdateOne {
	tco.mutation.SetTime(t)
	return tco
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableTime(t *time.Time) *TestCUpdateOne {
	if t != nil {
		tco.SetTime(*t)
	}
	return tco
}

// SetTestBID sets the "test_b" edge to the TestB entity by ID.
func (tco *TestCUpdateOne) SetTestBID(id int) *TestCUpdateOne {
	tco.mutation.SetTestBID(id)
	return tco
}

// SetNillableTestBID sets the "test_b" edge to the TestB entity by ID if the given value is not nil.
func (tco *TestCUpdateOne) SetNillableTestBID(id *int) *TestCUpdateOne {
	if id != nil {
		tco = tco.SetTestBID(*id)
	}
	return tco
}

// SetTestB sets the "test_b" edge to the TestB entity.
func (tco *TestCUpdateOne) SetTestB(t *TestB) *TestCUpdateOne {
	return tco.SetTestBID(t.ID)
}

// Mutation returns the TestCMutation object of the builder.
func (tco *TestCUpdateOne) Mutation() *TestCMutation {
	return tco.mutation
}

// ClearTestB clears the "test_b" edge to the TestB entity.
func (tco *TestCUpdateOne) ClearTestB() *TestCUpdateOne {
	tco.mutation.ClearTestB()
	return tco
}

// Where appends a list predicates to the TestCUpdate builder.
func (tco *TestCUpdateOne) Where(ps ...predicate.TestC) *TestCUpdateOne {
	tco.mutation.Where(ps...)
	return tco
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tco *TestCUpdateOne) Select(field string, fields ...string) *TestCUpdateOne {
	tco.fields = append([]string{field}, fields...)
	return tco
}

// Save executes the query and returns the updated TestC entity.
func (tco *TestCUpdateOne) Save(ctx context.Context) (*TestC, error) {
	return withHooks(ctx, tco.sqlSave, tco.mutation, tco.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tco *TestCUpdateOne) SaveX(ctx context.Context) *TestC {
	node, err := tco.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tco *TestCUpdateOne) Exec(ctx context.Context) error {
	_, err := tco.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tco *TestCUpdateOne) ExecX(ctx context.Context) {
	if err := tco.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tco *TestCUpdateOne) sqlSave(ctx context.Context) (_node *TestC, err error) {
	_spec := sqlgraph.NewUpdateSpec(testc.Table, testc.Columns, sqlgraph.NewFieldSpec(testc.FieldID, field.TypeInt))
	id, ok := tco.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestC.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tco.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testc.FieldID)
		for _, f := range fields {
			if !testc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tco.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tco.mutation.Name(); ok {
		_spec.SetField(testc.FieldName, field.TypeString, value)
	}
	if value, ok := tco.mutation.Int4(); ok {
		_spec.SetField(testc.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tco.mutation.AddedInt4(); ok {
		_spec.AddField(testc.FieldInt4, field.TypeInt32, value)
	}
	if value, ok := tco.mutation.Int8(); ok {
		_spec.SetField(testc.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tco.mutation.AddedInt8(); ok {
		_spec.AddField(testc.FieldInt8, field.TypeInt, value)
	}
	if value, ok := tco.mutation.Float4(); ok {
		_spec.SetField(testc.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tco.mutation.AddedFloat4(); ok {
		_spec.AddField(testc.FieldFloat4, field.TypeFloat32, value)
	}
	if value, ok := tco.mutation.Float8(); ok {
		_spec.SetField(testc.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tco.mutation.AddedFloat8(); ok {
		_spec.AddField(testc.FieldFloat8, field.TypeFloat64, value)
	}
	if value, ok := tco.mutation.Bool(); ok {
		_spec.SetField(testc.FieldBool, field.TypeBool, value)
	}
	if value, ok := tco.mutation.Text(); ok {
		_spec.SetField(testc.FieldText, field.TypeString, value)
	}
	if value, ok := tco.mutation.Time(); ok {
		_spec.SetField(testc.FieldTime, field.TypeTime, value)
	}
	if tco.mutation.TestBCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testc.TestBTable,
			Columns: []string{testc.TestBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tco.mutation.TestBIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testc.TestBTable,
			Columns: []string{testc.TestBColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestC{config: tco.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tco.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tco.mutation.done = true
	return _node, nil
}
