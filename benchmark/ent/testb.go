// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-preform/preform/benchmark/ent/testa"
	"github.com/go-preform/preform/benchmark/ent/testb"
)

// TestB is the model entity for the TestB schema.
type TestB struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AID holds the value of the "a_id" field.
	AID int `json:"a_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Int4 holds the value of the "int4" field.
	Int4 int32 `json:"int4,omitempty"`
	// Int8 holds the value of the "int8" field.
	Int8 int `json:"int8,omitempty"`
	// Float4 holds the value of the "float4" field.
	Float4 float32 `json:"float4,omitempty"`
	// Float8 holds the value of the "float8" field.
	Float8 float64 `json:"float8,omitempty"`
	// Bool holds the value of the "bool" field.
	Bool bool `json:"bool,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestBQuery when eager-loading is set.
	Edges        TestBEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestBEdges holds the relations/edges for other nodes in the graph.
type TestBEdges struct {
	// TestA holds the value of the test_a edge.
	TestA *TestA `json:"test_a,omitempty"`
	// TestCs holds the value of the test_cs edge.
	TestCs []*TestC `json:"test_cs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TestAOrErr returns the TestA value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestBEdges) TestAOrErr() (*TestA, error) {
	if e.TestA != nil {
		return e.TestA, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: testa.Label}
	}
	return nil, &NotLoadedError{edge: "test_a"}
}

// TestCsOrErr returns the TestCs value or an error if the edge
// was not loaded in eager-loading.
func (e TestBEdges) TestCsOrErr() ([]*TestC, error) {
	if e.loadedTypes[1] {
		return e.TestCs, nil
	}
	return nil, &NotLoadedError{edge: "test_cs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestB) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testb.FieldBool:
			values[i] = new(sql.NullBool)
		case testb.FieldFloat4, testb.FieldFloat8:
			values[i] = new(sql.NullFloat64)
		case testb.FieldID, testb.FieldAID, testb.FieldInt4, testb.FieldInt8:
			values[i] = new(sql.NullInt64)
		case testb.FieldName, testb.FieldText:
			values[i] = new(sql.NullString)
		case testb.FieldTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestB fields.
func (t *TestB) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testb.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case testb.FieldAID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field a_id", values[i])
			} else if value.Valid {
				t.AID = int(value.Int64)
			}
		case testb.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case testb.FieldInt4:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int4", values[i])
			} else if value.Valid {
				t.Int4 = int32(value.Int64)
			}
		case testb.FieldInt8:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int8", values[i])
			} else if value.Valid {
				t.Int8 = int(value.Int64)
			}
		case testb.FieldFloat4:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float4", values[i])
			} else if value.Valid {
				t.Float4 = float32(value.Float64)
			}
		case testb.FieldFloat8:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float8", values[i])
			} else if value.Valid {
				t.Float8 = value.Float64
			}
		case testb.FieldBool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool", values[i])
			} else if value.Valid {
				t.Bool = value.Bool
			}
		case testb.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				t.Text = value.String
			}
		case testb.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				t.Time = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestB.
// This includes values selected through modifiers, order, etc.
func (t *TestB) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTestA queries the "test_a" edge of the TestB entity.
func (t *TestB) QueryTestA() *TestAQuery {
	return NewTestBClient(t.config).QueryTestA(t)
}

// QueryTestCs queries the "test_cs" edge of the TestB entity.
func (t *TestB) QueryTestCs() *TestCQuery {
	return NewTestBClient(t.config).QueryTestCs(t)
}

// Update returns a builder for updating this TestB.
// Note that you need to call TestB.Unwrap() before calling this method if this TestB
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TestB) Update() *TestBUpdateOne {
	return NewTestBClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the TestB entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TestB) Unwrap() *TestB {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestB is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TestB) String() string {
	var builder strings.Builder
	builder.WriteString("TestB(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("a_id=")
	builder.WriteString(fmt.Sprintf("%v", t.AID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("int4=")
	builder.WriteString(fmt.Sprintf("%v", t.Int4))
	builder.WriteString(", ")
	builder.WriteString("int8=")
	builder.WriteString(fmt.Sprintf("%v", t.Int8))
	builder.WriteString(", ")
	builder.WriteString("float4=")
	builder.WriteString(fmt.Sprintf("%v", t.Float4))
	builder.WriteString(", ")
	builder.WriteString("float8=")
	builder.WriteString(fmt.Sprintf("%v", t.Float8))
	builder.WriteString(", ")
	builder.WriteString("bool=")
	builder.WriteString(fmt.Sprintf("%v", t.Bool))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(t.Text)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(t.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TestBs is a parsable slice of TestB.
type TestBs []*TestB
