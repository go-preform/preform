// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/go-preform/preform/benchmark/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-preform/preform/benchmark/ent/testa"
	"github.com/go-preform/preform/benchmark/ent/testb"
	"github.com/go-preform/preform/benchmark/ent/testc"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// TestA is the client for interacting with the TestA builders.
	TestA *TestAClient
	// TestB is the client for interacting with the TestB builders.
	TestB *TestBClient
	// TestC is the client for interacting with the TestC builders.
	TestC *TestCClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.TestA = NewTestAClient(c.config)
	c.TestB = NewTestBClient(c.config)
	c.TestC = NewTestCClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		TestA:  NewTestAClient(cfg),
		TestB:  NewTestBClient(cfg),
		TestC:  NewTestCClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:    ctx,
		config: cfg,
		TestA:  NewTestAClient(cfg),
		TestB:  NewTestBClient(cfg),
		TestC:  NewTestCClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		TestA.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.TestA.Use(hooks...)
	c.TestB.Use(hooks...)
	c.TestC.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.TestA.Intercept(interceptors...)
	c.TestB.Intercept(interceptors...)
	c.TestC.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *TestAMutation:
		return c.TestA.mutate(ctx, m)
	case *TestBMutation:
		return c.TestB.mutate(ctx, m)
	case *TestCMutation:
		return c.TestC.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// TestAClient is a client for the TestA schema.
type TestAClient struct {
	config
}

// NewTestAClient returns a client for the TestA from the given config.
func NewTestAClient(c config) *TestAClient {
	return &TestAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testa.Hooks(f(g(h())))`.
func (c *TestAClient) Use(hooks ...Hook) {
	c.hooks.TestA = append(c.hooks.TestA, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `testa.Intercept(f(g(h())))`.
func (c *TestAClient) Intercept(interceptors ...Interceptor) {
	c.inters.TestA = append(c.inters.TestA, interceptors...)
}

// Create returns a builder for creating a TestA entity.
func (c *TestAClient) Create() *TestACreate {
	mutation := newTestAMutation(c.config, OpCreate)
	return &TestACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestA entities.
func (c *TestAClient) CreateBulk(builders ...*TestACreate) *TestACreateBulk {
	return &TestACreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TestAClient) MapCreateBulk(slice any, setFunc func(*TestACreate, int)) *TestACreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TestACreateBulk{err: fmt.Errorf("calling to TestAClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TestACreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TestACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestA.
func (c *TestAClient) Update() *TestAUpdate {
	mutation := newTestAMutation(c.config, OpUpdate)
	return &TestAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestAClient) UpdateOne(t *TestA) *TestAUpdateOne {
	mutation := newTestAMutation(c.config, OpUpdateOne, withTestA(t))
	return &TestAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestAClient) UpdateOneID(id int) *TestAUpdateOne {
	mutation := newTestAMutation(c.config, OpUpdateOne, withTestAID(id))
	return &TestAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestA.
func (c *TestAClient) Delete() *TestADelete {
	mutation := newTestAMutation(c.config, OpDelete)
	return &TestADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestAClient) DeleteOne(t *TestA) *TestADeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TestAClient) DeleteOneID(id int) *TestADeleteOne {
	builder := c.Delete().Where(testa.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestADeleteOne{builder}
}

// Query returns a query builder for TestA.
func (c *TestAClient) Query() *TestAQuery {
	return &TestAQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTestA},
		inters: c.Interceptors(),
	}
}

// Get returns a TestA entity by its id.
func (c *TestAClient) Get(ctx context.Context, id int) (*TestA, error) {
	return c.Query().Where(testa.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestAClient) GetX(ctx context.Context, id int) *TestA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestBs queries the test_bs edge of a TestA.
func (c *TestAClient) QueryTestBs(t *TestA) *TestBQuery {
	query := (&TestBClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testa.Table, testa.FieldID, id),
			sqlgraph.To(testb.Table, testb.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testa.TestBsTable, testa.TestBsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestAClient) Hooks() []Hook {
	return c.hooks.TestA
}

// Interceptors returns the client interceptors.
func (c *TestAClient) Interceptors() []Interceptor {
	return c.inters.TestA
}

func (c *TestAClient) mutate(ctx context.Context, m *TestAMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TestACreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TestAUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TestAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TestADelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TestA mutation op: %q", m.Op())
	}
}

// TestBClient is a client for the TestB schema.
type TestBClient struct {
	config
}

// NewTestBClient returns a client for the TestB from the given config.
func NewTestBClient(c config) *TestBClient {
	return &TestBClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testb.Hooks(f(g(h())))`.
func (c *TestBClient) Use(hooks ...Hook) {
	c.hooks.TestB = append(c.hooks.TestB, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `testb.Intercept(f(g(h())))`.
func (c *TestBClient) Intercept(interceptors ...Interceptor) {
	c.inters.TestB = append(c.inters.TestB, interceptors...)
}

// Create returns a builder for creating a TestB entity.
func (c *TestBClient) Create() *TestBCreate {
	mutation := newTestBMutation(c.config, OpCreate)
	return &TestBCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestB entities.
func (c *TestBClient) CreateBulk(builders ...*TestBCreate) *TestBCreateBulk {
	return &TestBCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TestBClient) MapCreateBulk(slice any, setFunc func(*TestBCreate, int)) *TestBCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TestBCreateBulk{err: fmt.Errorf("calling to TestBClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TestBCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TestBCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestB.
func (c *TestBClient) Update() *TestBUpdate {
	mutation := newTestBMutation(c.config, OpUpdate)
	return &TestBUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestBClient) UpdateOne(t *TestB) *TestBUpdateOne {
	mutation := newTestBMutation(c.config, OpUpdateOne, withTestB(t))
	return &TestBUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestBClient) UpdateOneID(id int) *TestBUpdateOne {
	mutation := newTestBMutation(c.config, OpUpdateOne, withTestBID(id))
	return &TestBUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestB.
func (c *TestBClient) Delete() *TestBDelete {
	mutation := newTestBMutation(c.config, OpDelete)
	return &TestBDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestBClient) DeleteOne(t *TestB) *TestBDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TestBClient) DeleteOneID(id int) *TestBDeleteOne {
	builder := c.Delete().Where(testb.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestBDeleteOne{builder}
}

// Query returns a query builder for TestB.
func (c *TestBClient) Query() *TestBQuery {
	return &TestBQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTestB},
		inters: c.Interceptors(),
	}
}

// Get returns a TestB entity by its id.
func (c *TestBClient) Get(ctx context.Context, id int) (*TestB, error) {
	return c.Query().Where(testb.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestBClient) GetX(ctx context.Context, id int) *TestB {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestA queries the test_a edge of a TestB.
func (c *TestBClient) QueryTestA(t *TestB) *TestAQuery {
	query := (&TestAClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testb.Table, testb.FieldID, id),
			sqlgraph.To(testa.Table, testa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testb.TestATable, testb.TestAColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTestCs queries the test_cs edge of a TestB.
func (c *TestBClient) QueryTestCs(t *TestB) *TestCQuery {
	query := (&TestCClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testb.Table, testb.FieldID, id),
			sqlgraph.To(testc.Table, testc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testb.TestCsTable, testb.TestCsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestBClient) Hooks() []Hook {
	return c.hooks.TestB
}

// Interceptors returns the client interceptors.
func (c *TestBClient) Interceptors() []Interceptor {
	return c.inters.TestB
}

func (c *TestBClient) mutate(ctx context.Context, m *TestBMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TestBCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TestBUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TestBUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TestBDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TestB mutation op: %q", m.Op())
	}
}

// TestCClient is a client for the TestC schema.
type TestCClient struct {
	config
}

// NewTestCClient returns a client for the TestC from the given config.
func NewTestCClient(c config) *TestCClient {
	return &TestCClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `testc.Hooks(f(g(h())))`.
func (c *TestCClient) Use(hooks ...Hook) {
	c.hooks.TestC = append(c.hooks.TestC, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `testc.Intercept(f(g(h())))`.
func (c *TestCClient) Intercept(interceptors ...Interceptor) {
	c.inters.TestC = append(c.inters.TestC, interceptors...)
}

// Create returns a builder for creating a TestC entity.
func (c *TestCClient) Create() *TestCCreate {
	mutation := newTestCMutation(c.config, OpCreate)
	return &TestCCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TestC entities.
func (c *TestCClient) CreateBulk(builders ...*TestCCreate) *TestCCreateBulk {
	return &TestCCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TestCClient) MapCreateBulk(slice any, setFunc func(*TestCCreate, int)) *TestCCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TestCCreateBulk{err: fmt.Errorf("calling to TestCClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TestCCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TestCCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TestC.
func (c *TestCClient) Update() *TestCUpdate {
	mutation := newTestCMutation(c.config, OpUpdate)
	return &TestCUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestCClient) UpdateOne(t *TestC) *TestCUpdateOne {
	mutation := newTestCMutation(c.config, OpUpdateOne, withTestC(t))
	return &TestCUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestCClient) UpdateOneID(id int) *TestCUpdateOne {
	mutation := newTestCMutation(c.config, OpUpdateOne, withTestCID(id))
	return &TestCUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TestC.
func (c *TestCClient) Delete() *TestCDelete {
	mutation := newTestCMutation(c.config, OpDelete)
	return &TestCDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TestCClient) DeleteOne(t *TestC) *TestCDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TestCClient) DeleteOneID(id int) *TestCDeleteOne {
	builder := c.Delete().Where(testc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestCDeleteOne{builder}
}

// Query returns a query builder for TestC.
func (c *TestCClient) Query() *TestCQuery {
	return &TestCQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTestC},
		inters: c.Interceptors(),
	}
}

// Get returns a TestC entity by its id.
func (c *TestCClient) Get(ctx context.Context, id int) (*TestC, error) {
	return c.Query().Where(testc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestCClient) GetX(ctx context.Context, id int) *TestC {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTestB queries the test_b edge of a TestC.
func (c *TestCClient) QueryTestB(t *TestC) *TestBQuery {
	query := (&TestBClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(testc.Table, testc.FieldID, id),
			sqlgraph.To(testb.Table, testb.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testc.TestBTable, testc.TestBColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TestCClient) Hooks() []Hook {
	return c.hooks.TestC
}

// Interceptors returns the client interceptors.
func (c *TestCClient) Interceptors() []Interceptor {
	return c.inters.TestC
}

func (c *TestCClient) mutate(ctx context.Context, m *TestCMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TestCCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TestCUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TestCUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TestCDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TestC mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		TestA, TestB, TestC []ent.Hook
	}
	inters struct {
		TestA, TestB, TestC []ent.Interceptor
	}
)
