// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-preform/preform/benchmark/ent/predicate"
	"github.com/go-preform/preform/benchmark/ent/testa"
	"github.com/go-preform/preform/benchmark/ent/testb"
	"github.com/go-preform/preform/benchmark/ent/testc"
)

// TestBQuery is the builder for querying TestB entities.
type TestBQuery struct {
	config
	ctx        *QueryContext
	order      []testb.OrderOption
	inters     []Interceptor
	predicates []predicate.TestB
	withTestA  *TestAQuery
	withTestCs *TestCQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TestBQuery builder.
func (tb *TestBQuery) Where(ps ...predicate.TestB) *TestBQuery {
	tb.predicates = append(tb.predicates, ps...)
	return tb
}

// Limit the number of records to be returned by this query.
func (tb *TestBQuery) Limit(limit int) *TestBQuery {
	tb.ctx.Limit = &limit
	return tb
}

// Offset to start from.
func (tb *TestBQuery) Offset(offset int) *TestBQuery {
	tb.ctx.Offset = &offset
	return tb
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tb *TestBQuery) Unique(unique bool) *TestBQuery {
	tb.ctx.Unique = &unique
	return tb
}

// Order specifies how the records should be ordered.
func (tb *TestBQuery) Order(o ...testb.OrderOption) *TestBQuery {
	tb.order = append(tb.order, o...)
	return tb
}

// QueryTestA chains the current query on the "test_a" edge.
func (tb *TestBQuery) QueryTestA() *TestAQuery {
	query := (&TestAClient{config: tb.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tb.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tb.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testb.Table, testb.FieldID, selector),
			sqlgraph.To(testa.Table, testa.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, testb.TestATable, testb.TestAColumn),
		)
		fromU = sqlgraph.SetNeighbors(tb.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestCs chains the current query on the "test_cs" edge.
func (tb *TestBQuery) QueryTestCs() *TestCQuery {
	query := (&TestCClient{config: tb.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tb.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tb.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testb.Table, testb.FieldID, selector),
			sqlgraph.To(testc.Table, testc.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testb.TestCsTable, testb.TestCsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tb.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TestB entity from the query.
// Returns a *NotFoundError when no TestB was found.
func (tb *TestBQuery) First(ctx context.Context) (*TestB, error) {
	nodes, err := tb.Limit(1).All(setContextOp(ctx, tb.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{testb.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tb *TestBQuery) FirstX(ctx context.Context) *TestB {
	node, err := tb.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TestB ID from the query.
// Returns a *NotFoundError when no TestB ID was found.
func (tb *TestBQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tb.Limit(1).IDs(setContextOp(ctx, tb.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{testb.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tb *TestBQuery) FirstIDX(ctx context.Context) int {
	id, err := tb.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TestB entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TestB entity is found.
// Returns a *NotFoundError when no TestB entities are found.
func (tb *TestBQuery) Only(ctx context.Context) (*TestB, error) {
	nodes, err := tb.Limit(2).All(setContextOp(ctx, tb.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{testb.Label}
	default:
		return nil, &NotSingularError{testb.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tb *TestBQuery) OnlyX(ctx context.Context) *TestB {
	node, err := tb.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TestB ID in the query.
// Returns a *NotSingularError when more than one TestB ID is found.
// Returns a *NotFoundError when no entities are found.
func (tb *TestBQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tb.Limit(2).IDs(setContextOp(ctx, tb.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{testb.Label}
	default:
		err = &NotSingularError{testb.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tb *TestBQuery) OnlyIDX(ctx context.Context) int {
	id, err := tb.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TestBs.
func (tb *TestBQuery) All(ctx context.Context) ([]*TestB, error) {
	ctx = setContextOp(ctx, tb.ctx, "All")
	if err := tb.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TestB, *TestBQuery]()
	return withInterceptors[[]*TestB](ctx, tb, qr, tb.inters)
}

// AllX is like All, but panics if an error occurs.
func (tb *TestBQuery) AllX(ctx context.Context) []*TestB {
	nodes, err := tb.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TestB IDs.
func (tb *TestBQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tb.ctx.Unique == nil && tb.path != nil {
		tb.Unique(true)
	}
	ctx = setContextOp(ctx, tb.ctx, "IDs")
	if err = tb.Select(testb.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tb *TestBQuery) IDsX(ctx context.Context) []int {
	ids, err := tb.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tb *TestBQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tb.ctx, "Count")
	if err := tb.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tb, querierCount[*TestBQuery](), tb.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tb *TestBQuery) CountX(ctx context.Context) int {
	count, err := tb.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tb *TestBQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tb.ctx, "Exist")
	switch _, err := tb.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tb *TestBQuery) ExistX(ctx context.Context) bool {
	exist, err := tb.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TestBQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tb *TestBQuery) Clone() *TestBQuery {
	if tb == nil {
		return nil
	}
	return &TestBQuery{
		config:     tb.config,
		ctx:        tb.ctx.Clone(),
		order:      append([]testb.OrderOption{}, tb.order...),
		inters:     append([]Interceptor{}, tb.inters...),
		predicates: append([]predicate.TestB{}, tb.predicates...),
		withTestA:  tb.withTestA.Clone(),
		withTestCs: tb.withTestCs.Clone(),
		// clone intermediate query.
		sql:  tb.sql.Clone(),
		path: tb.path,
	}
}

// WithTestA tells the query-builder to eager-load the nodes that are connected to
// the "test_a" edge. The optional arguments are used to configure the query builder of the edge.
func (tb *TestBQuery) WithTestA(opts ...func(*TestAQuery)) *TestBQuery {
	query := (&TestAClient{config: tb.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tb.withTestA = query
	return tb
}

// WithTestCs tells the query-builder to eager-load the nodes that are connected to
// the "test_cs" edge. The optional arguments are used to configure the query builder of the edge.
func (tb *TestBQuery) WithTestCs(opts ...func(*TestCQuery)) *TestBQuery {
	query := (&TestCClient{config: tb.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tb.withTestCs = query
	return tb
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AID int `json:"a_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TestB.Query().
//		GroupBy(testb.FieldAID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tb *TestBQuery) GroupBy(field string, fields ...string) *TestBGroupBy {
	tb.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TestBGroupBy{build: tb}
	grbuild.flds = &tb.ctx.Fields
	grbuild.label = testb.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AID int `json:"a_id,omitempty"`
//	}
//
//	client.TestB.Query().
//		Select(testb.FieldAID).
//		Scan(ctx, &v)
func (tb *TestBQuery) Select(fields ...string) *TestBSelect {
	tb.ctx.Fields = append(tb.ctx.Fields, fields...)
	sbuild := &TestBSelect{TestBQuery: tb}
	sbuild.label = testb.Label
	sbuild.flds, sbuild.scan = &tb.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TestBSelect configured with the given aggregations.
func (tb *TestBQuery) Aggregate(fns ...AggregateFunc) *TestBSelect {
	return tb.Select().Aggregate(fns...)
}

func (tb *TestBQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tb.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tb); err != nil {
				return err
			}
		}
	}
	for _, f := range tb.ctx.Fields {
		if !testb.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tb.path != nil {
		prev, err := tb.path(ctx)
		if err != nil {
			return err
		}
		tb.sql = prev
	}
	return nil
}

func (tb *TestBQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TestB, error) {
	var (
		nodes       = []*TestB{}
		_spec       = tb.querySpec()
		loadedTypes = [2]bool{
			tb.withTestA != nil,
			tb.withTestCs != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TestB).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TestB{config: tb.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tb.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tb.withTestA; query != nil {
		if err := tb.loadTestA(ctx, query, nodes, nil,
			func(n *TestB, e *TestA) { n.Edges.TestA = e }); err != nil {
			return nil, err
		}
	}
	if query := tb.withTestCs; query != nil {
		if err := tb.loadTestCs(ctx, query, nodes,
			func(n *TestB) { n.Edges.TestCs = []*TestC{} },
			func(n *TestB, e *TestC) { n.Edges.TestCs = append(n.Edges.TestCs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tb *TestBQuery) loadTestA(ctx context.Context, query *TestAQuery, nodes []*TestB, init func(*TestB), assign func(*TestB, *TestA)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TestB)
	for i := range nodes {
		fk := nodes[i].AID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(testa.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "a_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tb *TestBQuery) loadTestCs(ctx context.Context, query *TestCQuery, nodes []*TestB, init func(*TestB), assign func(*TestB, *TestC)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*TestB)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(testc.FieldBID)
	}
	query.Where(predicate.TestC(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(testb.TestCsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "b_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tb *TestBQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tb.querySpec()
	_spec.Node.Columns = tb.ctx.Fields
	if len(tb.ctx.Fields) > 0 {
		_spec.Unique = tb.ctx.Unique != nil && *tb.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tb.driver, _spec)
}

func (tb *TestBQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(testb.Table, testb.Columns, sqlgraph.NewFieldSpec(testb.FieldID, field.TypeInt))
	_spec.From = tb.sql
	if unique := tb.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tb.path != nil {
		_spec.Unique = true
	}
	if fields := tb.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testb.FieldID)
		for i := range fields {
			if fields[i] != testb.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tb.withTestA != nil {
			_spec.Node.AddColumnOnce(testb.FieldAID)
		}
	}
	if ps := tb.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tb.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tb.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tb.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tb *TestBQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tb.driver.Dialect())
	t1 := builder.Table(testb.Table)
	columns := tb.ctx.Fields
	if len(columns) == 0 {
		columns = testb.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tb.sql != nil {
		selector = tb.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tb.ctx.Unique != nil && *tb.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tb.predicates {
		p(selector)
	}
	for _, p := range tb.order {
		p(selector)
	}
	if offset := tb.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tb.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TestBGroupBy is the group-by builder for TestB entities.
type TestBGroupBy struct {
	selector
	build *TestBQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tbb *TestBGroupBy) Aggregate(fns ...AggregateFunc) *TestBGroupBy {
	tbb.fns = append(tbb.fns, fns...)
	return tbb
}

// Scan applies the selector query and scans the result into the given value.
func (tbb *TestBGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tbb.build.ctx, "GroupBy")
	if err := tbb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestBQuery, *TestBGroupBy](ctx, tbb.build, tbb, tbb.build.inters, v)
}

func (tbb *TestBGroupBy) sqlScan(ctx context.Context, root *TestBQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tbb.fns))
	for _, fn := range tbb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tbb.flds)+len(tbb.fns))
		for _, f := range *tbb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tbb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tbb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TestBSelect is the builder for selecting fields of TestB entities.
type TestBSelect struct {
	*TestBQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tb *TestBSelect) Aggregate(fns ...AggregateFunc) *TestBSelect {
	tb.fns = append(tb.fns, fns...)
	return tb
}

// Scan applies the selector query and scans the result into the given value.
func (tb *TestBSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tb.ctx, "Select")
	if err := tb.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestBQuery, *TestBSelect](ctx, tb.TestBQuery, tb, tb.inters, v)
}

func (tb *TestBSelect) sqlScan(ctx context.Context, root *TestBQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tb.fns))
	for _, fn := range tb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tb.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
