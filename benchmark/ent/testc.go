// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-preform/preform/benchmark/ent/testb"
	"github.com/go-preform/preform/benchmark/ent/testc"
)

// TestC is the model entity for the TestC schema.
type TestC struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BID holds the value of the "b_id" field.
	BID int `json:"b_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Int4 holds the value of the "int4" field.
	Int4 int32 `json:"int4,omitempty"`
	// Int8 holds the value of the "int8" field.
	Int8 int `json:"int8,omitempty"`
	// Float4 holds the value of the "float4" field.
	Float4 float32 `json:"float4,omitempty"`
	// Float8 holds the value of the "float8" field.
	Float8 float64 `json:"float8,omitempty"`
	// Bool holds the value of the "bool" field.
	Bool bool `json:"bool,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestCQuery when eager-loading is set.
	Edges        TestCEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestCEdges holds the relations/edges for other nodes in the graph.
type TestCEdges struct {
	// TestB holds the value of the test_b edge.
	TestB *TestB `json:"test_b,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestBOrErr returns the TestB value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestCEdges) TestBOrErr() (*TestB, error) {
	if e.TestB != nil {
		return e.TestB, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: testb.Label}
	}
	return nil, &NotLoadedError{edge: "test_b"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestC) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testc.FieldBool:
			values[i] = new(sql.NullBool)
		case testc.FieldFloat4, testc.FieldFloat8:
			values[i] = new(sql.NullFloat64)
		case testc.FieldID, testc.FieldBID, testc.FieldInt4, testc.FieldInt8:
			values[i] = new(sql.NullInt64)
		case testc.FieldName, testc.FieldText:
			values[i] = new(sql.NullString)
		case testc.FieldTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestC fields.
func (t *TestC) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case testc.FieldBID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field b_id", values[i])
			} else if value.Valid {
				t.BID = int(value.Int64)
			}
		case testc.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case testc.FieldInt4:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int4", values[i])
			} else if value.Valid {
				t.Int4 = int32(value.Int64)
			}
		case testc.FieldInt8:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int8", values[i])
			} else if value.Valid {
				t.Int8 = int(value.Int64)
			}
		case testc.FieldFloat4:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float4", values[i])
			} else if value.Valid {
				t.Float4 = float32(value.Float64)
			}
		case testc.FieldFloat8:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float8", values[i])
			} else if value.Valid {
				t.Float8 = value.Float64
			}
		case testc.FieldBool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool", values[i])
			} else if value.Valid {
				t.Bool = value.Bool
			}
		case testc.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				t.Text = value.String
			}
		case testc.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				t.Time = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TestC.
// This includes values selected through modifiers, order, etc.
func (t *TestC) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTestB queries the "test_b" edge of the TestC entity.
func (t *TestC) QueryTestB() *TestBQuery {
	return NewTestCClient(t.config).QueryTestB(t)
}

// Update returns a builder for updating this TestC.
// Note that you need to call TestC.Unwrap() before calling this method if this TestC
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TestC) Update() *TestCUpdateOne {
	return NewTestCClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the TestC entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TestC) Unwrap() *TestC {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestC is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TestC) String() string {
	var builder strings.Builder
	builder.WriteString("TestC(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("b_id=")
	builder.WriteString(fmt.Sprintf("%v", t.BID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("int4=")
	builder.WriteString(fmt.Sprintf("%v", t.Int4))
	builder.WriteString(", ")
	builder.WriteString("int8=")
	builder.WriteString(fmt.Sprintf("%v", t.Int8))
	builder.WriteString(", ")
	builder.WriteString("float4=")
	builder.WriteString(fmt.Sprintf("%v", t.Float4))
	builder.WriteString(", ")
	builder.WriteString("float8=")
	builder.WriteString(fmt.Sprintf("%v", t.Float8))
	builder.WriteString(", ")
	builder.WriteString("bool=")
	builder.WriteString(fmt.Sprintf("%v", t.Bool))
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(t.Text)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(t.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TestCs is a parsable slice of TestC.
type TestCs []*TestC
